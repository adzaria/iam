# Creates a new user with a username, an email and a password
# POST /api/internal/v1/auth/register (PUBLIC)
# For the password flow only
# location /api/internal/v1/auth/register {
#     if ($request_method = POST) {
#         access_by_lua_block {
#             ngx.log(ngx.ERR, "================= new user creation")
#         }
#         proxy_pass http://iam;
#         proxy_http_version 1.1;
#         proxy_set_header Upgrade $http_upgrade;
#         proxy_set_header Connection 'upgrade';
#         proxy_set_header Host $host;
#         proxy_cache_bypass $http_upgrade;
#     }
# }

# Sends verification email to user
# POST /api/internal/v1/auth/users/{userId}/email-verification (PUBLIC)
# For both password and magic link flows

# Verifies user email
# PATCH /api/v1/auth/users/{userId}/email-verification/{verificationToken} (PUBLIC)
# For both password and magic link flows

# User requests to login
# POST /api/internal/v1/auth/login (PUBLIC)
# For the password flow only
location /api/internal/v1/auth/login {
    if ($request_method = POST) {
        content_by_lua_block {
            local access_token = "access_token_here"
            local refresh_token = "refresh_token_here"

            local cookies = {}

            local access_cookie_name             = "access_token"
            local access_cookie_value            = access_token
            local access_cookie_expiration       = 900
            local access_cookie_expiration_time  = ngx.time() + access_cookie_expiration
            local access_cookie                  = string.format("%s=%s; Expires=%s; Path=/; HttpOnly; Secure", access_cookie_name, access_cookie_value, ngx.cookie_time(access_cookie_expiration_time))
            table.insert(cookies, access_cookie)

            local refresh_cookie_name            = "refresh_token"
            local refresh_cookie_value           = refresh_token
            local refresh_cookie_expiration      = 604800
            local refresh_cookie_expiration_time = ngx.time() + refresh_cookie_expiration
            local refresh_cookie                 = string.format("%s=%s; Expires=%s; Path=/; HttpOnly; Secure", refresh_cookie_name, refresh_cookie_value, ngx.cookie_time(refresh_cookie_expiration_time))
            table.insert(cookies, refresh_cookie)

            ngx.header["Set-Cookie"] = cookies

            ngx.header.content_type = "application/json; charset=utf-8"
            ngx.say('{"status":"success"}')
        }
    }
}

# User requests to logout
# POST /api/internal/v1/auth/logout (PUBLIC)
# For both password and magic link flows
location /api/internal/v1/auth/logout {
    if ($request_method = POST) {
        content_by_lua_block {
            local expired = ngx.time() - 1
            local refresh_cookie = string.format("refresh_token=; Expires=%s; Path=/; HttpOnly; Secure", ngx.cookie_time(expired))
            local access_cookie = string.format("access_token=; Expires=%s; Path=/; HttpOnly; Secure", ngx.cookie_time(expired))
            ngx.header["Set-Cookie"] = {refresh_cookie, access_cookie}
            ngx.header.content_type = "application/json; charset=utf-8"
            ngx.say('{"status":"success"}')
        }
    }
}

# User requests a new access token
# POST /api/v1/internal/auth/refresh (PUBLIC)

# Proxy all other requests to the service
# ALL METHODS /api/internal/v1/auth (PROTECTED)
location /api/internal/v1/auth {
    access_by_lua_block {
        -- access verification here
    }
    proxy_pass http://iam;
    proxy_http_version 1.1;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection 'upgrade';
    proxy_set_header Host $host;
    proxy_cache_bypass $http_upgrade;
}
