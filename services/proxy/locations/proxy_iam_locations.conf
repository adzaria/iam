# proxy_iam_locations.conf
#
# Public routes and protected routes needing custom handling
# are handled by the location blocks bellow. Protected routes are
# proxied to the IAM service after verification of the access token.

location /api/internal/v1/auth {
    # Called by the client to get the current user
    # GET /api/internal/v1/auth/whoami
    location /api/internal/v1/auth/whoami {
        limit_except GET { deny all; }
        proxy_pass http://iam;
    }

    # Called by the client to create a new user
    # POST /api/internal/v1/auth/register
    location /api/internal/v1/auth/register {
        limit_except POST { deny all; }
        proxy_pass http://iam;
    }

    # Called by the client to send a verification email to a user
    # POST /api/internal/v1/auth/users/{userId}/email-verification
    location ~ ^/api/internal/v1/auth/users/[^/]+/email-verification/?$ {
        limit_except POST { deny all; }
        proxy_pass http://iam;
    }

    # Called by the client to verify the email of a user
    # PATCH /api/v1/auth/users/{userId}/email-verification/{verificationCode}
    # /!\ This route can issue an authorization token
    location ~ ^/api/internal/v1/auth/users/[^/]+/email-verification/[^/]+/?$ {
        limit_except PATCH { deny all; }
        proxy_pass http://iam;
    }

    # Called by the client to receive an authorization code
    # POST /api/internal/v1/auth/login
    # /!\ This route can issue an authorization token
    location /api/internal/v1/auth/login {
        limit_except POST { deny all; }
        proxy_pass http://iam;
    }

    # Called by the client to exchange an authorization code
    # for an access token and a refresh token
    # POST /api/internal/v1/auth/login
    location ~ ^/api/internal/v1/auth/login/[^/]+/?$ {
        limit_except POST { deny all; }
        content_by_lua_block { (require "iam").login() }
    }

    # Called by the client to log the user out
    # POST /api/internal/v1/auth/logout
    location /api/internal/v1/auth/logout {
        limit_except POST { deny all; }
        content_by_lua_block { (require "iam").logout() }
    }

    # Called by the client to get a new access token
    # POST /api/v1/internal/auth/refresh
    # /!\ This route can issue an authorization token
    location /api/internal/v1/auth/refresh {
        limit_except POST { deny all; }
        proxy_pass http://iam;
    }

    # Catch all - Redirects traffic to the IAM service
    location /api/internal/v1/auth {
        access_by_lua_block { (require "middlewares").control_access_token() }
        proxy_pass http://iam;
    }
}

# Public proxy to upstream iam service (used by captures).
location /api/proxy-iam-public {
    internal;
    proxy_pass http://iam$request_uri;
}