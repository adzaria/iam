# proxy_iam_locations.conf
#
# Public routes and protected routes needing custom handling
# are handled by the lua handlers bellow. Protected routes are
# proxied to the IAM service through the /proxy_auth block
# after verification of the relevant access token.

location /api/internal/v1/auth {
    # Called by the client to get the current user
    # GET /api/internal/v1/auth/whoami (PUBLIC)
    location /api/internal/v1/auth/whoami {
        limit_except GET { deny all; }
        proxy_pass http://iam;
    }

    # Called by the client to create a new user
    # POST /api/internal/v1/auth/register (PUBLIC)
    # For the password flow only
    location /api/internal/v1/auth/register {
        limit_except POST { deny all; }
        proxy_pass http://iam;
    }

    # Called by the client to send a verification email to a user
    # POST /api/internal/v1/auth/users/{userId}/email-verification (PUBLIC)
    # For both password and magic link flows
    location ~ ^/api/internal/v1/auth/users/[^/]+/email-verification/?$ {
        limit_except POST { deny all; }
        proxy_pass http://iam;
    }

    # Called by the client to verify the email of a user
    # PATCH /api/v1/auth/users/{userId}/email-verification/{verificationToken} (PUBLIC)
    # For both password and magic link flows
    location ~ ^/api/internal/v1/auth/users/[^/]+/email-verification/[^/]+/?$ {
        limit_except PATCH { deny all; }
        content_by_lua_block { (require "iam").email_verification_code() }
    }

    # Called by the client to log the user in
    # POST /api/internal/v1/auth/login (PUBLIC)
    # For the password flow only
    location /api/internal/v1/auth/login {
        limit_except POST { deny all; }
        content_by_lua_block { (require "iam").login() }
    }

    # Called by the client to log the user out
    # POST /api/internal/v1/auth/logout (PUBLIC)
    # For both password and magic link flows
    location /api/internal/v1/auth/logout {
        limit_except POST { deny all; }
        content_by_lua_block { (require "iam").logout() }
    }

    # Called by the client to get a new access token
    # POST /api/v1/internal/auth/refresh (PUBLIC)
    location /api/internal/v1/auth/refresh {
        limit_except POST { deny all; }
        content_by_lua_block { (require "iam").refresh() }
    }

    # Catch all - Redirects traffic to the IAM service
    location /api/internal/v1/auth {
        access_by_lua_block { (require "middlewares").control_access_token() }
        proxy_pass http://iam;
    }
}

# Public proxy to upstream iam service.
location /api/proxy-iam-public {
    internal;
    proxy_pass http://iam$request_uri;
}