# proxy_auth.conf
#
# Public routes and protected routes needing custom handling
# are handled by the lua handlers bellow. Protected routes are
# proxied to the IAM service through the /proxy_auth block
# after verification of the relevant access token.

location /api/internal/v1/auth {
    location /api/internal/v1/auth/whoami {
        limit_except GET { deny all; }
        content_by_lua_block { (require "auth").whoAmI() }
    }

    location /api/internal/v1/auth/register {
        limit_except POST { deny all; }
        content_by_lua_block { (require "auth").register() }
    }

    location ~ ^/api/internal/v1/auth/users/[^/]+/email-verification/?$ {
        limit_except POST { deny all; }
        content_by_lua_block { (require "auth").email_verification() }
    }

    location ~ ^/api/internal/v1/auth/users/[^/]+/email-verification/[^/]+/?$ {
        limit_except PATCH { deny all; }
        content_by_lua_block { (require "auth").email_verification_code() }
    }

    location /api/internal/v1/auth/login {
        limit_except POST { deny all; }
        content_by_lua_block { (require "auth").login() }
    }

    location /api/internal/v1/auth/logout {
        limit_except POST { deny all; }
        content_by_lua_block { (require "auth").logout() }
    }

    location /api/internal/v1/auth/refresh {
        limit_except POST { deny all; }
        content_by_lua_block { (require "auth").refresh() }
    }

    # Catch-all - Redirects traffic to the IAM service (protected)
    location /api/internal/v1/auth {
        access_by_lua_block {
            -- access control
        }

        proxy_pass http://iam;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_cache_bypass $http_upgrade;
    }
}